using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace GestorTipoCambio
{
    class Program
    {
        static Dictionary<DateTime, decimal> tipoCambioHistorico = new Dictionary<DateTime, decimal>();
        static decimal tipoCambioActual = 0;

        static async Task Main(string[] args)
        {
            InicializarHistorico();
            while (true)
            {
                Console.Clear();
                Console.WriteLine("Gestor de Tipo de Cambio");
                Console.WriteLine("1. Mostrar tipo de cambio de compra del día");
                Console.WriteLine("2. Ingresar tipo de cambio del día");
                Console.WriteLine("3. Actualizar tipo de cambio de uno de los últimos 7 días");
                Console.WriteLine("4. Mostrar tipo de cambio de los últimos 7 días");
                Console.WriteLine("5. Salir");
                Console.Write("Seleccione una opción: ");
                string opcion = Console.ReadLine();

                switch (opcion)
                {
                    case "1":
                        await MostrarTipoCambioActual();
                        break;
                    case "2":
                        IngresarTipoCambioDelDia();
                        break;
                    case "3":
                        ActualizarTipoCambio();
                        break;
                    case "4":
                        MostrarTipoCambioHistorico();
                        break;
                    case "5":
                        return;
                    default:
                        Console.WriteLine("Opción no válida. Intente de nuevo.");
                        break;
                }
                Console.WriteLine("Presione cualquier tecla para continuar...");
                Console.ReadKey();
            }
        }

        static async Task MostrarTipoCambioActual()
        {
            try
            {
                
                tipoCambioActual = await ObtenerTipoCambioDeAPI();

                
                if (tipoCambioActual > 0)
                {
                    
                    Console.WriteLine($"Tipo de cambio de compra del día: {tipoCambioActual}");
                }
                else
                {
                    
                    Console.WriteLine("Datos del Ministerio de Hacienda de Costa Rica a día de hoy");
                }
            }
            catch (Exception ex)
            {
                
                Console.WriteLine($"Error al mostrar el tipo de cambio: {ex.Message}");
            }
        }

        static async Task<decimal> ObtenerTipoCambioDeAPI()
        {
            using (HttpClient client = new HttpClient())
            {
                try
                {
                    string url = "https://api.hacienda.go.cr/indicadores/tc";
                    HttpResponseMessage response = await client.GetAsync(url);

                    if (response.IsSuccessStatusCode)
                    {
                        string jsonResponse = await response.Content.ReadAsStringAsync();

                        Console.WriteLine($"Respuesta JSON: {jsonResponse}");

                       
                        var data = JsonConvert.DeserializeObject<Dictionary<string, object>>(jsonResponse);

                        
                        if (data.ContainsKey("venta"))
                        {
                           
                            return Convert.ToDecimal(data["venta"]);
                        }
                        else
                        {
                            Console.WriteLine("");
                            return 0;
                        }
                    }
                    else
                    {
                        Console.WriteLine($"Error al obtener datos. Código de estado HTTP: {response.StatusCode}");
                        return 0;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error al obtener los datos: {ex.Message}");
                    return 0;
                }
            }
        }

        static void IngresarTipoCambioDelDia()
        {
            Console.Write("Ingrese el tipo de cambio de compra del día: ");
            if (decimal.TryParse(Console.ReadLine(), out decimal nuevoTipoCambio))
            {
                tipoCambioActual = nuevoTipoCambio;
                tipoCambioHistorico[DateTime.Today] = nuevoTipoCambio;
                Console.WriteLine("Tipo de cambio ingresado correctamente.");
            }
            else
            {
                Console.WriteLine("Valor no válido. Intente de nuevo.");
            }
        }

        static void ActualizarTipoCambio()
        {
            Console.Write("Ingrese la fecha (formato: dd/MM/yyyy) del tipo de cambio a actualizar: ");
            if (DateTime.TryParse(Console.ReadLine(), out DateTime fecha))
            {
                if (tipoCambioHistorico.ContainsKey(fecha))
                {
                    Console.Write("Ingrese el nuevo tipo de cambio: ");
                    if (decimal.TryParse(Console.ReadLine(), out decimal nuevoTipoCambio))
                    {
                        tipoCambioHistorico[fecha] = nuevoTipoCambio;
                        Console.WriteLine("Tipo de cambio actualizado correctamente.");
                    }
                    else
                    {
                        Console.WriteLine("Valor no válido. Intente de nuevo.");
                    }
                }
                else
                {
                    Console.WriteLine("No hay registro para esa fecha. Intente de nuevo.");
                }
            }
            else
            {
                Console.WriteLine("Fecha no válida. Intente de nuevo.");
            }
        }

        static void MostrarTipoCambioHistorico()
        {
            Console.WriteLine("Tipo de cambio de los últimos 7 días:");

            foreach (var fecha in tipoCambioHistorico)
            {
                if (fecha.Value == 0)
                {
                    Console.WriteLine($"{fecha.Key.ToShortDateString()}: NA");
                }
                else
                {
                    Console.WriteLine($"{fecha.Key.ToShortDateString()}: {fecha.Value}");
                }
            }
        }

        static void InicializarHistorico()
        {
            DateTime fechaActual = DateTime.Today;
            for (int i = 0; i < 7; i++)
            {
                tipoCambioHistorico[fechaActual.AddDays(-i)] = 0;
            }
        }
    }
}
