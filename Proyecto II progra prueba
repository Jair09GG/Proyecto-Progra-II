using System;
using System.Collections.Generic;
using System.Linq;

namespace GestorTipoCambio
{
    class Program
    {
        static Dictionary<DateTime, decimal> tipoCambioHistorico = new Dictionary<DateTime, decimal>();
        static decimal tipoCambioActual = 0;

        static void Main(string[] args)
        {
            InicializarHistorico();
            while (true)
            {
                Console.Clear();
                Console.WriteLine("Gestor de Tipo de Cambio");
                Console.WriteLine("1. Mostrar tipo de cambio de compra del día");
                Console.WriteLine("2. Ingresar tipo de cambio del día");
                Console.WriteLine("3. Actualizar tipo de cambio de uno de los últimos 7 días");
                Console.WriteLine("4. Mostrar tipo de cambio de los últimos 7 días");
                Console.WriteLine("5. Realizar análisis de tipo de cambio");
                Console.WriteLine("6. Salir");
                Console.Write("Seleccione una opción: ");
                string opcion = Console.ReadLine();

                switch (opcion)
                {
                    case "1":
                        MostrarTipoCambioActual();
                        break;
                    case "2":
                        IngresarTipoCambioDelDia();
                        break;
                    case "3":
                        ActualizarTipoCambio();
                        break;
                    case "4":
                        MostrarTipoCambioHistorico();
                        break;
                    case "5":
                        RealizarAnalisisTipoCambio();
                        break;
                    case "6":
                        return;
                    default:
                        Console.WriteLine("Opción no válida. Intente de nuevo.");
                        break;
                }
                Console.WriteLine("Presione cualquier tecla para continuar...");
                Console.ReadKey();
            }
        }

        static void MostrarTipoCambioActual()
        {
            Console.WriteLine(tipoCambioActual > 0
                ? $"Tipo de cambio de compra del día: {tipoCambioActual}"
                : "No se ha ingresado un tipo de cambio para el día.");
        }

        static void IngresarTipoCambioDelDia()
        {
            Console.Write("Ingrese el tipo de cambio de compra del día: ");
            if (decimal.TryParse(Console.ReadLine(), out decimal nuevoTipoCambio))
            {
                tipoCambioActual = nuevoTipoCambio;
                tipoCambioHistorico[DateTime.Today] = nuevoTipoCambio;
                Console.WriteLine("Tipo de cambio ingresado correctamente.");
            }
            else
            {
                Console.WriteLine("Valor no válido. Intente de nuevo.");
            }
        }

        static void ActualizarTipoCambio()
        {
            Console.Write("Ingrese la fecha (formato: dd/MM/yyyy) del tipo de cambio a actualizar: ");
            if (DateTime.TryParse(Console.ReadLine(), out DateTime fecha) && tipoCambioHistorico.ContainsKey(fecha))
            {
                Console.Write("Ingrese el nuevo tipo de cambio: ");
                if (decimal.TryParse(Console.ReadLine(), out decimal nuevoTipoCambio))
                {
                    tipoCambioHistorico[fecha] = nuevoTipoCambio;
                    Console.WriteLine("Tipo de cambio actualizado correctamente.");
                }
                else
                {
                    Console.WriteLine("Valor no válido. Intente de nuevo.");
                }
            }
            else
            {
                Console.WriteLine("Fecha no válida o sin registro. Intente de nuevo.");
            }
        }

        static void MostrarTipoCambioHistorico()
        {
            Console.WriteLine("Tipo de cambio de los últimos 7 días:");
            foreach (var fecha in tipoCambioHistorico)
            {
                Console.WriteLine($"{fecha.Key.ToShortDateString()}: {(fecha.Value == 0 ? "NA" : fecha.Value.ToString())}");
            }
        }

        static void InicializarHistorico()
        {
            DateTime fechaActual = DateTime.Today;
            for (int i = 0; i < 7; i++)
            {
                tipoCambioHistorico[fechaActual.AddDays(-i)] = 0;
            }
        }

        static void RealizarAnalisisTipoCambio()
        {
            Console.Write("Ingrese el número de días a analizar: ");
            if (!int.TryParse(Console.ReadLine(), out int dias) || dias <= 0)
            {
                Console.WriteLine("Número de días no válido. Usando 7 por defecto.");
                dias = 7;
            }

            Random random = new Random();
            Dictionary<DateTime, decimal> datos = new Dictionary<DateTime, decimal>();
            DateTime hoy = DateTime.Now;

            for (int i = 0; i < dias; i++)
            {
                DateTime fecha = hoy.AddDays(-i);
                decimal tipoCambio = Math.Round((decimal)(random.NextDouble() * (20.0 - 18.0) + 18.0), 2);
                datos[fecha] = tipoCambio;
            }

            decimal promedio = datos.Values.Average();
            decimal minimo = datos.Values.Min();
            decimal maximo = datos.Values.Max();
            DateTime fechaMinimo = datos.FirstOrDefault(x => x.Value == minimo).Key;
            DateTime fechaMaximo = datos.FirstOrDefault(x => x.Value == maximo).Key;

            Console.WriteLine($"\nTipo de cambio promedio: {promedio:F2}");
            Console.WriteLine($"Tipo de cambio más bajo: {minimo:F2} en {fechaMinimo.ToShortDateString()}");
            Console.WriteLine($"Tipo de cambio más alto: {maximo:F2} en {fechaMaximo.ToShortDateString()}");

            Console.WriteLine("\nDiferencias en el tipo de cambio con respecto al día anterior:");
            var fechas = datos.Keys.ToList();
            for (int i = 1; i < fechas.Count; i++)
            {
                decimal diferencia = datos[fechas[i]] - datos[fechas[i - 1]];
                Console.WriteLine($"Diferencia del {fechas[i].ToShortDateString()}: {diferencia:F2}");
            }
        }
    }
}
